// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  phone      String      @unique
  password   String
  role       UserRole @default(STUDENT) // Enum for roles (STUDENT, INSTRUCTOR, ADMIN)
  courses    Course[] @relation("StudentCourses") // Courses the user is enrolled in
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Payment    Payment[]
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}



model Course {
  id           Int             @id @default(autoincrement())
  title        String
  description  String
  price        Float
  category     courseCategory[] @default([])  // Make category an array of courseCategory
  instructorName String?
  instructorId Int
  students     User[]          @relation("StudentCourses") // Users enrolled in this course
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  Payment      Payment[]
}

enum courseCategory {
  WebDevelopment
  Backend
  Frontend
  AI
  DataScience
}


model Payment {
  id          Int       @id @default(autoincrement())
  amount      Float
  status      PaymentStatus
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    Int
  createdAt   DateTime  @default(now())
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

